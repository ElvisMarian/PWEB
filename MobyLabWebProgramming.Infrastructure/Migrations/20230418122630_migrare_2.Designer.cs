// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobyLabWebProgramming.Infrastructure.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MobyLabWebProgramming.Infrastructure.Migrations
{
    [DbContext(typeof(WebAppDatabaseContext))]
    [Migration("20230418122630_migrare_2")]
    partial class migrare_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "unaccent");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Adresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Oras")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Strada")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Tara")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1")
                        .IsUnique();

                    b.ToTable("Adrese", (string)null);
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Comanda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdresaLivrareId")
                        .HasColumnType("uuid");

                    b.Property<int>("Cantitate")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("PretTotal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("StatusComanda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UtilizatorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdresaLivrareId");

                    b.HasIndex("UtilizatorId");

                    b.ToTable("Comenzi", (string)null);
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Livrare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdresaLivrareId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComandaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataLivrare")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NumeCurier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdresaLivrareId");

                    b.HasIndex("ComandaId")
                        .IsUnique();

                    b.ToTable("Livrari", (string)null);
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Produs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ComandaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descriere")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Disponibilitate")
                        .HasColumnType("integer");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Pret")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric(2,1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ComandaId");

                    b.ToTable("Produse", (string)null);
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Recenzie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataRecenzie")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Nota")
                        .HasColumnType("integer");

                    b.Property<string>("Produs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TextRecenzie")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Recenzie");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.RecenzieProdus", b =>
                {
                    b.Property<Guid>("RecenzieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdusId")
                        .HasColumnType("uuid");

                    b.HasKey("RecenzieId", "ProdusId");

                    b.HasIndex("ProdusId");

                    b.ToTable("RecenziiProduse", (string)null);
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<string>>("Wishlist")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.UserFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4095)
                        .HasColumnType("character varying(4095)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserFile");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Adresa", b =>
                {
                    b.HasOne("MobyLabWebProgramming.Core.Entities.User", "User")
                        .WithMany("Adrese")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobyLabWebProgramming.Core.Entities.User", null)
                        .WithOne("AdresaLivrare")
                        .HasForeignKey("MobyLabWebProgramming.Core.Entities.Adresa", "UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Comanda", b =>
                {
                    b.HasOne("MobyLabWebProgramming.Core.Entities.Adresa", "AdresaLivrare")
                        .WithMany()
                        .HasForeignKey("AdresaLivrareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MobyLabWebProgramming.Core.Entities.User", "Utilizator")
                        .WithMany("IstoricComenzi")
                        .HasForeignKey("UtilizatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdresaLivrare");

                    b.Navigation("Utilizator");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Livrare", b =>
                {
                    b.HasOne("MobyLabWebProgramming.Core.Entities.Adresa", "AdresaLivrare")
                        .WithMany()
                        .HasForeignKey("AdresaLivrareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MobyLabWebProgramming.Core.Entities.Comanda", "Comanda")
                        .WithOne("Livrare")
                        .HasForeignKey("MobyLabWebProgramming.Core.Entities.Livrare", "ComandaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdresaLivrare");

                    b.Navigation("Comanda");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Produs", b =>
                {
                    b.HasOne("MobyLabWebProgramming.Core.Entities.Comanda", null)
                        .WithMany("Produse")
                        .HasForeignKey("ComandaId");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.RecenzieProdus", b =>
                {
                    b.HasOne("MobyLabWebProgramming.Core.Entities.Produs", "Produs")
                        .WithMany("RecenziiProduse")
                        .HasForeignKey("ProdusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobyLabWebProgramming.Core.Entities.Recenzie", "Recenzie")
                        .WithMany("RecenziiProduse")
                        .HasForeignKey("RecenzieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produs");

                    b.Navigation("Recenzie");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.UserFile", b =>
                {
                    b.HasOne("MobyLabWebProgramming.Core.Entities.User", "User")
                        .WithMany("UserFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Comanda", b =>
                {
                    b.Navigation("Livrare")
                        .IsRequired();

                    b.Navigation("Produse");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Produs", b =>
                {
                    b.Navigation("RecenziiProduse");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.Recenzie", b =>
                {
                    b.Navigation("RecenziiProduse");
                });

            modelBuilder.Entity("MobyLabWebProgramming.Core.Entities.User", b =>
                {
                    b.Navigation("AdresaLivrare")
                        .IsRequired();

                    b.Navigation("Adrese");

                    b.Navigation("IstoricComenzi");

                    b.Navigation("UserFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
